{"version":3,"sources":["components/ContactForm/contactForm.module.css","components/ContactList/contact.module.css","components/App.module.css","components/Filter/filter.module.css","redux/contacts/contactSlice.js","redux/store.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/App.js","index.js"],"names":["module","exports","contactApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContact","query","providesTags","deleteContact","mutation","contactId","url","method","invalidatesTags","createContact","body","name","number","useFetchContactQuery","useDeleteContactMutation","useCreateContactMutation","store","configureStore","reducer","middleware","getDefaultMiddleware","devTools","process","setupListeners","dispatch","ContactForm","isLoading","contacts","data","onSubmit","e","preventDefault","currentTarget","value","newContact","some","contact","toast","error","reset","className","s","label","maxLength","input","type","pattern","title","required","button","disabled","color","height","width","Filter","onChange","ContactList","isDeleting","map","item","onClick","id","App","useState","filter","setFilter","isFetching","container","wrapper","normilizedFilter","toLowerCase","includes","getVisibleContacts","autoClose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dee26183.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"contactForm_label__2k45f\",\"input\":\"contactForm_input__QGXGH\",\"button\":\"contactForm_button__1Dei5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"contact_contact__1qFoW\",\"item\":\"contact_item__2wCmh\",\"button\":\"contact_button__3IhiS\",\"name\":\"contact_name__545j8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1iFof\",\"wrapper\":\"App_wrapper__2xmvr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"filter_input__1DzMe\"};","import {createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react';\r\n\r\nexport const contactApi = createApi({\r\n    reducerPath:  'contactApi',\r\n    baseQuery: fetchBaseQuery({\r\n        baseUrl: 'https://6199033d3fc322001722f610.mockapi.io/api/v1/'\r\n    }),\r\n    tagTypes: ['Contact'],\r\n    endpoints: builder => ({\r\n        fetchContact: builder.query({\r\n            query: () => `/contacts`,\r\n        providesTags: ['Contact'],\r\n        }),\r\n        deleteContact: builder.mutation({\r\n            query: contactId => ({\r\n                url: `/contacts/${contactId}`,\r\n                method: 'DELETE',\r\n            }),\r\n            invalidatesTags: ['Contact']\r\n        }),\r\n        createContact: builder.mutation({\r\n            query: ({name, number}) => ({\r\n                url: '/contacts',\r\n                method: 'POST',\r\n                body: {\r\n                    name,\r\n                    number,\r\n                }\r\n            }),\r\n            invalidatesTags: ['Contact']\r\n        })\r\n    }),\r\n});\r\n\r\nexport const {useFetchContactQuery, useDeleteContactMutation, useCreateContactMutation} = contactApi ","import {configureStore} from '@reduxjs/toolkit'\r\nimport {setupListeners} from '@reduxjs/toolkit/query'\r\nimport {contactApi} from './contacts/contactSlice'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    [contactApi.reducerPath]: contactApi.reducer,\r\n  },\r\n  middleware: getDefaultMiddleware => [\r\n    ...getDefaultMiddleware(),\r\n    contactApi.middleware,\r\n  ],\r\n  devTools: process.env.NODE_ENV === 'development'\r\n})\r\n\r\nsetupListeners(store.dispatch)\r\n\r\n// ======================== old ========================== // \r\n// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import contactsReducer from './contacts/contacts-reducers'\r\n// import logger from 'redux-logger'\r\n// import { \r\n//   // persistStore, \r\n//   // persistReducer, \r\n//   FLUSH,\r\n//   REHYDRATE,\r\n//   PAUSE,\r\n//   PERSIST,\r\n//   PURGE,\r\n//   REGISTER, } \r\n//   from 'redux-persist'\r\n\r\n// // import storage from 'redux-persist/lib/storage'\r\n\r\n// // const contactsPersistConfig = {\r\n// //   key: 'contact',\r\n// //   storage,\r\n// //   blacklist: ['filter']\r\n// // }\r\n\r\n// const middleware = [...getDefaultMiddleware({\r\n//   serializableCheck: {\r\n//     ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//   },\r\n// }), logger]\r\n\r\n// export const store = configureStore({\r\n//   reducer: {\r\n//     contacts: contactsReducer,\r\n//     // contacts: persistReducer(contactsPersistConfig, contactsReducer)\r\n//   },\r\n//   middleware,\r\n//   devTools: process.env.NODE_ENV === 'development'\r\n// })\r\n\r\n// export default store\r\n// // export const persistor = persistStore(store)","import s from \"./contactForm.module.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport {useCreateContactMutation, useFetchContactQuery} from '../../redux/contacts/contactSlice'\r\n\r\n\r\nexport default function ContactForm() {\r\nconst [createContact, {isLoading}] = useCreateContactMutation();\r\nconst {data: contacts} = useFetchContactQuery()\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const name = e.currentTarget.name.value;\r\n    const number = e.currentTarget.number.value;\r\n    const newContact = {\r\n      name,\r\n      number,\r\n    }\r\n      if(contacts.some((contact) => name === contact.name)) {\r\n        toast.error(\"This contact is already exist!\");\r\n        e.currentTarget.reset()\r\n        return;\r\n      }\r\n      createContact(newContact);\r\n      e.currentTarget.reset()\r\n  };\r\n\r\n    return (\r\n      <>\r\n        <form onSubmit={handleSubmit}>\r\n          <label className={s.label}>\r\n            Name\r\n            <input\r\n              maxLength=\"22\"\r\n              className={s.input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <label className={s.label}>\r\n            Number\r\n            <input\r\n              className={s.input}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\" className={s.button} disabled={isLoading}>\r\n            Add contact \r\n              {isLoading && (\r\n                <Loader \r\n                type=\"ThreeDots\"\r\n                color=\"#000000\"\r\n                height={12}\r\n                width={12}\r\n                />\r\n              )}\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n    }\r\n","import s from \"./filter.module.css\";\r\n// import {useSelector, useDispatch} from 'react-redux'\r\n// import {getFilter} from '../../redux/contacts/contacts-selectors'\r\n// import {changeFilter} from '../../redux/contacts/contacts-actions'\r\n\r\nexport default function Filter({value, onChange}) {\r\n// const value = useSelector(getFilter)\r\n// const dispatch = useDispatch()\r\n\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n        // onChange={e => dispatch(changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n","import s from \"./contact.module.css\";\r\n// import {useSelector, useDispatch} from 'react-redux'\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n// import {useSelector} from 'react-redux'\r\nimport {useDeleteContactMutation} from '../../redux/contacts/contactSlice';\r\n\r\nexport default function ContactList({contacts}) {\r\n  const [deleteContact, {isLoading: isDeleting}] = useDeleteContactMutation()\r\n\r\n  \r\n  return (\r\n    <ul className={s.contact}>\r\n      {contacts.map((contact) => (\r\n        <li key={contact.id} {...contact} className={s.item}>\r\n           <p className={s.name}>{contact.name}</p>\r\n           <p>{contact.number}</p>\r\n           <button className={s.button} onClick={() => deleteContact(contact.id)} disabled={isDeleting}>\r\n        Delete\r\n        {isDeleting && (\r\n          <Loader\r\n            type=\"ThreeDots\"\r\n            color=\"#000000\"\r\n            height={12}\r\n            width={12}\r\n            />\r\n        )}\r\n      </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = state => ({\r\n//   const {filter, items} = state.contacts;\r\n//   const visibleContacts = getVisibleContacts(items, filter)\r\n//   return {constacts: visibleContacts}\r\n// })\r\n\r\n// const mapStateToProps = ({contacts: {items, filter}}) => ({\r\n//   // contacts: getVisibleContacts(state.contacts.items, state.contacts.filter)\r\n//   contacts: getVisibleContacts(items, filter)\r\n// }) \r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteContact: id => dispatch(contactsActions.deleteContact(id))\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import {useState} from 'react'\r\nimport ContactForm from \"./ContactForm\";\r\nimport Filter from \"./Filter\";\r\nimport ContactList from \"./ContactList\";\r\nimport s from \"./App.module.css\";\r\nimport { ToastContainer} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport {useFetchContactQuery} from '../redux/contacts/contactSlice';\r\n\r\n\r\nexport default function App() {\r\n  const [filter, setFilter] = useState('')\r\n  const {data, isFetching} = useFetchContactQuery();\r\n\r\n  const changeFilter = e => {\r\n    setFilter(e.currentTarget.value);\r\n  }\r\n\r\n  const getVisibleContacts = () => {\r\n    const normilizedFilter = filter.toLowerCase();\r\n\r\n    return data.filter(contact => contact.name.toLowerCase().includes(normilizedFilter))\r\n  }\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      <h1>Phonebook</h1>\r\n      <h3>Add contacts</h3>\r\n      <ContactForm />\r\n\r\n      <h3>Contacts</h3>\r\n      <Filter value={filter} onChange={changeFilter}/>\r\n      <div className={s.wrapper}>\r\n      {data && <ContactList contacts={getVisibleContacts()}/>}\r\n      </div>\r\n      <ToastContainer autoClose={4000} />\r\n    </div>\r\n  );\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { myActions } from \"./redux/actions\";\nimport { Provider } from \"react-redux\";\n// import { PersistGate } from 'redux-persist/integration/react'\n// import {store, persistor} from \"./redux/store\";\nimport {store} from \"./redux/store\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// console.log(store.dispatch(myActions));"],"sourceRoot":""}